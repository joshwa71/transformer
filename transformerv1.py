# -*- coding: utf-8 -*-
"""transformerv1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vR18yye1Ft4Vtc8gbQZTs6SGZ2KS0fo4
"""

import torch
import torch.nn as nn

class SelfAttention(nn.Module):
  def __init__(self, embed_size, heads):
    super(SelfAttention, self).__init__()
    #word embedding size
    self.embed_size = embed_size 
    #no. attention heads
    self.heads = heads
    #divides each word embedding, each attention head receives division 
    self.head_dim = embed_size // heads 

    assert (self.head_dim * heads == embed_size), "Embed size needs to be div by heads"

    self.values = nn.Linear(self.head_dim, self.head_dim, bias=False)
    self.keys = nn.Linear(self.head_dim, self.head_dim, bias=False)
    self.queries = nn.Linear(self.head_dim, self.head_dim, bias=False)
    self.fully_connected_out = nn.Linear(embed_size, embed_size)

  def forward(self, values, keys, query, mask):
    #number of training examples
    N = query.shape[0]
    #length of values, keys and queries            
    value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]

    #split embedding into parts for heads
    values = values.reshape(N, value_len, self.heads, self.head_dim)
    keys = keys.reshape(N, key_len, self.heads, self.head_dim)
    queries = query.reshape(N, query_len, self.heads, self.head_dim)

    #calculate energy
    #queries shape: (N {no. examples}, query_len {= to len sentence}, heads {attention heads}, heads_dim {word embedding divided by heads})
    #keys shape: (N {no. examples}, key_len {= to len sentence}, heads {attention heads}, heads_dim {word embedding divided by heads})
    #energy shape: (N {no. examples}, heads {attention heads}, query_len {= to len sentence}, key_len {= to len sentence}) 
    energy = torch.einsum("nqhd,nkhd->nhqk", [queries, keys])


    #create triangular matrix mask so next word can only be predicted from previous words
    if mask is not None:
      energy = energy.masked_fill(mask == 0, float("-1e20"))

    #attention equation, dim=3 means normalise across key_len (sentence length)
    attention = torch.softmax(energy / (self.embed_size ** (1/2)), dim=3)

    #calculate output of self attention and concatonate
    #attention shape: (N, heads, query_len, key_len)
    #values shape: (N, value_len, heads, heads_dim)
    #output shape: (N, query_len, heads, head_dim)
    out_sa = torch.einsum("nhql,nlhd->nqhd", [attention, values]).reshape(N, query_len, self.heads*self.head_dim)

    #linear layer
    output = self.fully_connected_out(out_sa)
    return output

class TransformerBlock(nn.Module):
  def __init__(self, embed_size, heads, dropout, forward_expansion):
    super(TransformerBlock, self).__init__()
    self.attention = SelfAttention(embed_size, heads)

    #normalise attention result before adding data
    self.norm1 = nn.LayerNorm(embed_size)
    self.norm2 = nn.LayerNorm(embed_size)

    #fully connected feed forward, expand dimensions by forward_expansion

    self.feed_forward = nn.Sequential(
        nn.Linear(embed_size, forward_expansion*embed_size),
        nn.ReLU(),
        nn.Linear(forward_expansion*embed_size, embed_size)
    )

    #add dropout
    self.dropout = nn.Dropout(dropout)
  
  def forward(self, value, key, query, mask):
    attention = self.attention(value, key, query, mask)

    x = self.dropout(self.normal(attention + query))
    forward = self.feed_forward(x)
    out = self.dropout(self.norm2(forward + x))
    return out

class Encoder(nn.Module):
    def __init__(
        self,
        src_vocab_size,
        embed_size,
        num_layers,
        heads,
        device,
        forward_expansion,
        dropout,
        max_length
    ):
      super(Encoder, self).__init__()
      self.embed_size = embed_size
      self.device = device
      self.word_embedding = nn.Embedding(src_vocab_size, embed_size)
      #positional embedding added to word_embedding, not paper implementation
      self.pos_embedding = nn.Embedding(max_length, embed_size)

      #tie modules together
      self.layers = nn.ModuleList(
          [
              TransformerBlock(
                  embed_size,
                  heads,
                  dropout=dropout,
                  forward_expansion=forward_expansion
              )
              for _ in range(num_layers)
          ]
      )

      #define dropout
      self.dropout = nn.Dropout(dropout)

    def forward(self, x, mask):
      #number of examples and length of sequence
      N, seq_length = x.shape
      #collect positions of words in sentence [0, 1, 2...], for all examples
      positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)

      #send x through embedding and add position embedding
      out = self.droupout(self.word_embedding(x) + self.position_embedding(positions))

      #run embedding through encoder
      for layer in self.layers:
        out = layer(out, out, out, mask)
      return out

class DecoderBlock(nn.Module):
  def __init__(self, embed_size, heads, forward_expansion, dropout, device):
    super(DecoderBlock, self).__init__()
    self.attention = SelfAttention(embed_size, heads)
    self.norm = nn.LayerNorm(embed_size)
    self.transformer_block = TransformerBlock(embed_size, heads, dropout, forward_expansion)
    self.dropout = nn.Dropout(dropout)

  def forward(self, x, value, key, src_mask, trg_mask):
    attention = self.attention(x, x, x, trg_mask)
    query = self.dropout(self.dropout(self.norm(attention + x)))
    out = self.transformer_block(value, key, query, src_mask)
    return out

class Decoder(nn.Module):
  def __init__(
      self, 
      trg_vocab_size,
      embed_size,
      num_layers,
      heads,
      forward_expansion,
      dropout, 
      device,
      max_length,
  ):
    super(Decoder, self).__init__()
    self.device = device
    self.word_embedding = nn.Embedding(trg_vocab_size, embed_size)
    self.position_embedding = nn.Embedding(max_length, embed_size)

    self.layers = nn.ModuleList (
        [
            DecoderBlock(embed_size, heads, forward_expansion, dropout, device) for _ in range(num_layers)
        ]
    )

    self.fc_out = nn.Linear(embed_size, trg_vocab_size)
    self.dropout = nn.Dropout(dropout)

  def forward(self, x, enc_out, src_mask, trg_mask):
    N, seq_length = x.shape
    positions = torch.arrange(0, seq_length).expand(N, seq_length).to(self.device)
    x = self.dropout((self.word_embedding(x) + self.position_embedding(positions)))

    for layer in self.layers:
      x = layer(x, enc_out, enc_out, src_mask, trg_mask)

    out = self.fc_out(x)
    return out

class Transformer(nn.Module):
  def __init__(
      self, 
      src_vocab_size,
      trg_vocab_size,
      src_pad_index,
      trg_pad_index,
      embed_size=256,
      num_layers=2,
      forward_expansion=4,
      heads=8,
      dropout=0,
      device="cuda",
      max_length=100
  ):
    super(Transformer, self).__init__()

    self.encoder = Encoder(
        src_vocab_size,
        embed_size,
        num_layers,
        heads,
        device,
        forward_expansion,
        dropout,
        max_length
    )

    self.decoder = Decoder(
        trg_vocab_size, embed_size,
        num_layers,
        heads,
        forward_expansion,
        dropout,
        device,
        max_length
    )

    self.src_pad_index = src_pad_index
    self.trg_pad_index = trg_pad_index
    self.device = device

  def make_src_mask(self, src):
    #dim = (N, 1, 1, src_length)    
    src_mask = (src != self.src_pad_index).unsqueeze(1).unsqueeze(2)
    return src_mask.to(self.device)

  def make_trg_mask(self, trg):
    N, trg_len = trg.shape
    trg_mask = torch.tril(torch.ones(trg_len, trg_len)).expand(N, 1, trg_len, trg_len)
    return trg_mask.to(self.device)

  def forward(self, src, trg):
    src_mask = self.make_src_mask(src)
    trg_mask = self.make_trg_mask(trg)
    enc_src = self.encoder(src, src_mask)
    out = self.decoder(trg, enc_src, src_mask, trg_mask)
    return out

#run transformer here